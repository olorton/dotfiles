" Plugin manager -------------------------------------------------------------

let data_dir = '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()

Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'christoomey/vim-tmux-navigator'
Plug 'itchyny/lightline.vim'
"Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'ericbn/vim-solarized'
Plug 'scrooloose/nerdtree'
Plug 'bling/vim-bufferline'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'famiu/bufdelete.nvim'
Plug 'ekalinin/Dockerfile.vim'
" Plug 'mboughaba/i3config.vim'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-cmdline'
Plug 'heavenshell/vim-pydocstring'
Plug 'sbdchd/neoformat'
" TODO Neomake
" TODO shellcheck
Plug 'martinda/jenkinsfile-vim-syntax'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'wfxr/protobuf.vim'

call plug#end()

let g:pydocstring_doq_path = '~/.local/bin/doq'

" Basics ---------------------------------------------------------------------

set number
set encoding=utf-8

" For file related tasks, tab complete into sub-folders
"set path+=**

" Time out on key codes but not mappings.
set ttimeoutlen=10

" Only do case-sensitive search when caps in search string
set ignorecase
set smartcase

" Better indenting
set smartindent

" Enable file type detection and do language-dependent indenting.
filetype plugin indent on

" Set cursor shape to line in insert mode, underline shape in replace mode and
" block shape in normal mode.
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

" Fixes issue with the default behavior which is that nvim shifts the cursor
" left when exiting Insert mode: https://news.ycombinator.com/item?id=30463129
au InsertLeave * :normal `^

" Tidy up split pane dividers
highlight VertSplit cterm=NONE

" Fix backspace
set backspace=indent,eol,start

" Having longer updatetime (default is 4000 ms = 4s) leads to noticeable
" delays and poor user experience
set updatetime=300

" Disable mouse interactions
set mouse=

" Spacing --------------------------------------------------------------------

"set nowrap
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set textwidth=0

autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab



" Backups --------------------------------------------------------------------

set noswapfile
set undodir=~/.vim/tmp/undo//
set nobackup
set nowritebackup



" Leader ---------------------------------------------------------------------

nnoremap <SPACE> <Nop>
let mapleader = " "



" Colour scheme --------------------------------------------------------------

set termguicolors
syntax enable
set background=light
colorscheme solarized

" Enable CursorLine
set cursorline
set cursorlineopt=number

set signcolumn=yes



" Lightline ------------------------------------------------------------------

set laststatus=2
set noshowmode
let g:lightline = {
      \ 'colorscheme': 'solarized',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'filename', 'gitbranch', 'readonly', 'modified'] ]
      \ },
      \ 'component': {
      \   'helloworld': 'Hello, world!',
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead',
      \ },
  \ }


" Trailing whitespace --------------------------------------------------------

" Show tab characters as: --->
set list
set listchars=tab:-->

" Highlight trailing whitespace with red
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()
" Remove trailing lines on save. ALEFix is not run automatically on save.
autocmd BufWritePre * %s/\s\+$//e



" Highlight cursor -----------------------------------------------------------

augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup END



" Autosave/autoread ----------------------------------------------------------

" Reload when entering the buffer or gaining focus
au FocusGained,BufEnter * :silent! !

" Save when exiting the buffer or losing focus
au FocusLost,WinLeave,CursorHold * :silent! wall

" Write to disk when navigating file
set autowrite

" Automatically read the file if it was changed externally
set autoread



" Commands -------------------------------------------------------------------

"command! MakeTags ! /usr/local/bin/ctags -R --exclude=.git --exclude=node_modules .
command! EditConfig :edit ~/.config/nvim/init.vim
command! ReloadConfig :source ~/.config/nvim/init.vim



" Keybindings ----------------------------------------------------------------


" Nerdtree
map <leader>e :NERDTreeToggle<CR>
nmap <leader>n :NERDTreeFind<CR>
let NERDTreeQuitOnOpen=1  " Close nerdtree after a file is opened
let NERDTreeIgnore = ['\.pyc$', '__pycache__']

" Fzf settings
let $FZF_DEFAULT_COMMAND = 'ag -g ""'

" Fuzzy search project file contents
nnoremap <C-g> :Rg<Cr>

" Fuzzy search project file names
nnoremap <C-p> :Files<Cr>

" Fuzzy search open buffers
nmap ; :Buffers<CR>

" Close buffer, but leave the split open and switch to next buffer in the list
nmap <leader>w :w<bar>Bdelete<CR>

" Yank to the system clipboard
vmap <leader>y "*y<CR>

" Format the current file
nmap <leader>l :Neoformat<CR>

" Refresh the state of the buffer, clear hightlights, and write file
nnoremap <Esc> :nohl<CR>:w<CR>:GitGutterAll<CR>



" Exit insert mode after 30 secs with no cursor movement ---------------------

let g:inactivity_limit = 30  " max Insert mode inactivity before fail, in seconds
let g:check_frequency = 1    " seconds between checks

augroup monitor
    au!
    " when vim starts kick off the infinitely repeating calls to the monitor function
    au VimEnter * call timer_start(g:check_frequency * 1000, 'MonitorActivity', {'repeat' : -1})

    " when cursor moves in Insert mode update the last activity time
    au CursorMovedI * let g:last_activity = reltime()
augroup END

func! MonitorActivity(timer_id)
    " when we start we'll initialize the last activity time then return
    " ...gives a little grace period at beginning
    if ! exists('g:last_activity') || empty(g:last_activity)
        let g:last_activity = reltime()
        return
    endif

    " very handy function for our purposes, reltime
    let l:diff = reltime(g:last_activity)[0]

    if l:diff > g:inactivity_limit
        " Not exit insert mode and save buffer
        echom "Exiting insert mode after timeout: " . l:diff
        stopinsert
        let g:last_activity = []
    endif
endfunc



" Movement -------------------------------------------------------------------

" Break the habit, you stupid boy!
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" Cycle through buffers
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>

" Set the number of lines to keep viewable on the screen. Default = 0;
set scrolloff=4



" Tab style autocomplete dropdown --------------------------------------------
" TODO Is this rubbish? Probably? Replace?
" function! InsertTabWrapper()
"     let col = col('.') - 1
"     if !col || getline('.')[col - 1] !~ '\k'
"         return "\<tab>"
"     else
"         return "\<c-n>"
"     endif
" endfunction
" inoremap <tab> <c-r>=InsertTabWrapper()<cr>



" Commentary -----------------------------------------------------------------

nmap <leader>c gcc
xmap <leader>c gc



" Neoformat ------------------------------------------------------------------

let g:neoformat_run_all_formatters = 1
let g:neoformat_try_formatprg = 1

let g:neoformat_enabled_css = ['prettier']
let g:neoformat_enabled_javascript = ['prettier']
let g:neoformat_enabled_javascriptreact = ['prettier']
let g:neoformat_enabled_jsx = ['prettier']
let g:neoformat_enabled_python = ['black']
" let g:neoformat_enabled_bzl = ["buildifier"]


" Git blame toggle -----------------------------------------------------------
" https://github.com/tpope/vim-fugitive/issues/1474

function! s:BlameToggle() abort
  let found = 0
  for winnr in range(1, winnr('$'))
    if getbufvar(winbufnr(winnr), '&filetype') ==# 'fugitiveblame'
      exe winnr . 'close'
      let found = 1
    endif
  endfor
  if !found
    Git blame
  endif
endfunction

nmap <silent> <Leader>b :call <SID>BlameToggle()<CR>



" Help system ----------------------------------------------------------------

augroup vimrc_help
    autocmd!
    autocmd BufEnter *.txt if &buftype == 'help' | wincmd L | endif
augroup END

augroup ft_vim
    au!

    au BufNewFile,BufRead init.vim* setlocal filetype=vim

    au FileType vim setlocal foldmethod=marker
    au FileType help setlocal textwidth=78
augroup END



" pydocstring ---------------------------------------------------------------------

let g:pydocstring_enable_mapping = 0



" File types -----------------------------------------------------------------

augroup ft_python
    au!

    " requirements files
    au BufNewFile,BufRead *requirements.txt setlocal filetype=text nospell

    au FileType python setlocal omnifunc=pythoncomplete#Complete
    au FileType python setlocal define=^\s*\\(def\\\\|class\\)
    au FileType python setlocal foldnestmax=1

    " More syntax highlighting for Python
    let python_highlight_all = 1
augroup END

if has('autocmd')
  if has('spell')
    au BufNewFile,BufRead COMMIT_EDITMSG setlocal spell
  endif
  " move to top of the buffer and switch to insert mode
  " au BufNewFile,BufRead COMMIT_EDITMSG call feedkeys('ggi', 't')
endif



" Coc ------------------------------------------------------------------------

let g:coc_global_extensions = ['coc-html', 'coc-css', 'coc-tsserver', 'coc-json', 'coc-pyright']
let g:coc_user_config = {'diagnostic.checkCurrentLine' : 1}
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gr <Plug>(coc-references)
inoremap <silent><expr> <C-j> coc#pum#visible() ? coc#pum#next(1) : "\<C-n>"
inoremap <silent><expr> <C-k> coc#pum#visible() ? coc#pum#prev(1) : "\<C-p>"
inoremap <expr> <CR> coc#pum#visible() ? coc#_select_confirm() : "\<CR>"
