" Plugin manager -------------------------------------------------------------

let data_dir = '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()

Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'christoomey/vim-tmux-navigator'
Plug 'itchyny/lightline.vim'
"Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'ericbn/vim-solarized'
Plug 'scrooloose/nerdtree'
Plug 'bling/vim-bufferline'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'famiu/bufdelete.nvim'
Plug 'ekalinin/Dockerfile.vim'
" Plug 'mboughaba/i3config.vim'
Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-cmdline'
Plug 'heavenshell/vim-pydocstring'
Plug 'sbdchd/neoformat'
" TODO Neomake
" TODO shellcheck
Plug 'martinda/jenkinsfile-vim-syntax'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'wfxr/protobuf.vim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'hashivim/vim-terraform'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'b4b4r07/vim-hcl'

call plug#end()

let g:pydocstring_doq_path = '~/.local/bin/doq'

" Basics ---------------------------------------------------------------------

set number
set encoding=utf-8

" For file related tasks, tab complete into sub-folders
"set path+=**

" Time out on key codes but not mappings.
set ttimeoutlen=10

" Only do case-sensitive search when caps in search string
set ignorecase
set smartcase

" Better indenting
set smartindent

" Enable file type detection and do language-dependent indenting.
filetype plugin indent on

" Set cursor shape to line in insert mode, underline shape in replace mode and
" block shape in normal mode.
let &t_SI = "\<Esc>[6 q"
let &t_SR = "\<Esc>[4 q"
let &t_EI = "\<Esc>[2 q"

" Fixes issue with the default behavior which is that nvim shifts the cursor
" left when exiting Insert mode: https://news.ycombinator.com/item?id=30463129
au InsertLeave * :normal `^

" Tidy up split pane dividers
highlight VertSplit cterm=NONE

" Fix backspace
set backspace=indent,eol,start

" Having longer updatetime (default is 4000 ms = 4s) leads to noticeable
" delays and poor user experience
set updatetime=300

" Disable mouse interactions
set mouse=

" Spacing --------------------------------------------------------------------

"set nowrap
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set textwidth=0

autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab



" Backups --------------------------------------------------------------------

set noswapfile
set undodir=~/.vim/tmp/undo//
set nobackup
set nowritebackup



" Leader ---------------------------------------------------------------------

nnoremap <SPACE> <Nop>
let mapleader = " "



" Colour scheme --------------------------------------------------------------

set termguicolors
syntax enable
set background=light
colorscheme solarized

" Enable CursorLine
set cursorline
set cursorlineopt=number

set signcolumn=yes



" Lightline ------------------------------------------------------------------

set laststatus=2
set noshowmode
let g:lightline = {
      \ 'colorscheme': 'solarized',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'filename', 'gitbranch', 'readonly', 'modified'] ]
      \ },
      \ 'component': {
      \   'helloworld': 'Hello, world!',
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead',
      \ },
  \ }


" Trailing whitespace --------------------------------------------------------

" Show tab characters as: --->
set list
set listchars=tab:-->

" Highlight trailing whitespace with red
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()
" Remove trailing lines on save. ALEFix is not run automatically on save.
autocmd BufWritePre * %s/\s\+$//e



" Highlight cursor -----------------------------------------------------------

augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup END



" Autosave/autoread ----------------------------------------------------------

" Reload when entering the buffer or gaining focus
au FocusGained,BufEnter * :silent! !

" Save when exiting the buffer or losing focus
au FocusLost,WinLeave,CursorHold * :silent! wall

" Write to disk when navigating file
set autowrite

" Automatically read the file if it was changed externally
set autoread



" Commands -------------------------------------------------------------------

"command! MakeTags ! /usr/local/bin/ctags -R --exclude=.git --exclude=node_modules .
command! EditConfig :edit ~/.config/nvim/init.vim
command! ReloadConfig :source ~/.config/nvim/init.vim



" Keybindings ----------------------------------------------------------------


" Nerdtree
map <leader>e :NERDTreeToggle<CR>
nmap <leader>n :NERDTreeFind<CR>
let NERDTreeQuitOnOpen=1  " Close nerdtree after a file is opened
let NERDTreeIgnore = ['\.pyc$', '__pycache__']

" Fzf settings
let $FZF_DEFAULT_COMMAND = 'ag -g ""'

" Fuzzy search project file contents
nnoremap <C-g> :Rg<Cr>

" Fuzzy search project file names
nnoremap <C-p> :Files<Cr>

" Fuzzy search open buffers
nmap ; :Buffers<CR>

" Close buffer, but leave the split open and switch to next buffer in the list
nmap <leader>w :w<bar>Bdelete<CR>

" Yank to the system clipboard
vmap <leader>y "*y<CR>

" Format the current file
nmap <leader>l :Neoformat<CR>

" Refresh the state of the buffer, clear hightlights, and write file
nnoremap <Esc> :nohl<CR>:w<CR>:GitGutterAll<CR>



" Movement -------------------------------------------------------------------

" Break the habit, you stupid boy!
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" Cycle through buffers
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>

" Set the number of lines to keep viewable on the screen. Default = 0;
set scrolloff=4



" Tab style autocomplete dropdown --------------------------------------------
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-n>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>



" Commentary -----------------------------------------------------------------

nmap <leader>c gcc
xmap <leader>c gc



" Treesitter -----------------------------------------------------------------

if has("nvim")
lua <<EOF
    require'nvim-treesitter.configs'.setup {
      ensure_installed = {
          "bash",
          "c",
          "cpp",
          "css",
          "diff",
          "dockerfile",
          "git_config",
          "gitignore",
          "go",
          "html",
          "htmldjango",
          "ini",
          "javascript",
          "jq",
          "json",
          "make",
          "php",
          "python",
          "rst",
          "rust",
          "sql",
          "terraform",
          "toml",
          "toml",
          "twig",
          "typescript",
          "vim",
          "yaml",
      },
      indent = {
        disable = {"python", },
      },
    }
EOF
endif



" Neoformat ------------------------------------------------------------------

let g:neoformat_run_all_formatters = 1
let g:neoformat_try_formatprg = 1

let g:neoformat_enabled_css = ['prettier']
let g:neoformat_enabled_javascript = ['prettier']
let g:neoformat_enabled_javascriptreact = ['prettier']
let g:neoformat_enabled_jsx = ['prettier']
let g:neoformat_enabled_python = ['black']
" let g:neoformat_enabled_bzl = ["buildifier"]


" Git blame toggle -----------------------------------------------------------
" https://github.com/tpope/vim-fugitive/issues/1474

function! s:BlameToggle() abort
  let found = 0
  for winnr in range(1, winnr('$'))
    if getbufvar(winbufnr(winnr), '&filetype') ==# 'fugitiveblame'
      exe winnr . 'close'
      let found = 1
    endif
  endfor
  if !found
    Git blame
  endif
endfunction

nmap <silent> <Leader>b :call <SID>BlameToggle()<CR>



" Help system ----------------------------------------------------------------

augroup vimrc_help
    autocmd!
    autocmd BufEnter *.txt if &buftype == 'help' | wincmd L | endif
augroup END

augroup ft_vim
    au!

    au BufNewFile,BufRead init.vim* setlocal filetype=vim

    au FileType vim setlocal foldmethod=marker
    au FileType help setlocal textwidth=78
augroup END



" pydocstring ---------------------------------------------------------------------

let g:pydocstring_enable_mapping = 0



" File types -----------------------------------------------------------------

augroup ft_python
    au!

    " requirements files
    au BufNewFile,BufRead *requirements.txt setlocal filetype=text nospell

    au FileType python setlocal omnifunc=pythoncomplete#Complete
    au FileType python setlocal define=^\s*\\(def\\\\|class\\)
    au FileType python setlocal foldnestmax=1

    " More syntax highlighting for Python
    let python_highlight_all = 1
augroup END

" Disable visual tab chars in go, by disabling all visual listchars
au FileType go setlocal nolist

if has('autocmd')
  if has('spell')
    au BufNewFile,BufRead COMMIT_EDITMSG setlocal spell
  endif
  " move to top of the buffer and switch to insert mode
  " au BufNewFile,BufRead COMMIT_EDITMSG call feedkeys('ggi', 't')
endif



" Coc ------------------------------------------------------------------------

let g:coc_global_extensions = ['coc-html', 'coc-css', 'coc-tsserver', 'coc-json', 'coc-pyright']
let g:coc_user_config = {'diagnostic.checkCurrentLine' : 1}
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gr <Plug>(coc-references)
inoremap <silent><expr> <C-j> coc#pum#visible() ? coc#pum#next(1) : "\<C-n>"
inoremap <silent><expr> <C-k> coc#pum#visible() ? coc#pum#prev(1) : "\<C-p>"
inoremap <expr> <CR> coc#pum#visible() ? coc#_select_confirm() : "\<CR>"



" ----------------------------------------------------------------------------
" -- Example Coc config, needs sorting massively!!!
" ----------------------------------------------------------------------------
" May need for Vim (not Neovim) since coc.nvim calculates byte offset by count
" utf-8 byte sequence
set encoding=utf-8
" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Having longer updatetime (default is 4000 ms = 4s) leads to noticeable
" delays and poor user experience
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call ShowDocumentation()<CR>

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s)
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying code actions to the selected code block
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying code actions at the cursor position
nmap <leader>ac  <Plug>(coc-codeaction-cursor)
" Remap keys for apply code actions affect whole buffer
nmap <leader>as  <Plug>(coc-codeaction-source)
" Apply the most preferred quickfix action to fix diagnostic on the current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Remap keys for applying refactor code actions
nmap <silent> <leader>re <Plug>(coc-codeaction-refactor)
xmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)
nmap <silent> <leader>r  <Plug>(coc-codeaction-refactor-selected)

" Run the Code Lens action on the current line
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> to scroll float windows/popups
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges
" Requires 'textDocument/selectionRange' support of language server
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
