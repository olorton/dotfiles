#!/bin/bash
platform='unknown'
unamestr=`uname`
if [[ "$unamestr" == 'Linux' ]]; then
   platform='linux'
elif [[ "$unamestr" == 'Darwin' ]]; then
   platform='osx'
fi

# Ensure user-installed binaries take precedence
if [[ $platform == 'osx' ]]; then
    # TODO pick up the php version automatically
	export PATH="$HOME/.dotfiles/bin:$(brew --prefix homebrew/php/php56)/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/Sublime Text.app/Contents/SharedSupport/bin/"
else
	# TODO add php to path
	export PATH="$HOME/.dotfiles/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
fi

# Load aliases
if [ -f ~/.dotfiles/bash/aliases ]; then
    source ~/.dotfiles/bash/aliases
fi

# Load git-completion
if [ -f ~/.dotfiles/git/git-completion.bash ]; then
    source ~/.dotfiles/git/git-completion.bash
fi

# Load global git ignore
if [ -f ~/.dotfiles/git/gitignore_global ]; then
	git config --global core.excludesfile ~/.dotfiles/git/gitignore_global
fi


# Load jump
export MARKPATH=$HOME/.marks
function jump {
    cd -P "$MARKPATH/$1" 2>/dev/null || echo "No such mark: $1"
}
function mark {
    mkdir -p "$MARKPATH"; ln -s "$(pwd)" "$MARKPATH/$1"
}
function unmark {
    rm -i "$MARKPATH/$1"
}
if [ $platform == 'osx' ]; then
	function marks {
	    \ls -l "$MARKPATH" | tail -n +2 | sed 's/  / /g' | cut -d' ' -f9- | awk -F ' -> ' '{printf "%-10s -> %s\n", $1, $2}'
	}
else
	function marks {
	    ls -l "$MARKPATH" | sed 's/  / /g' | cut -d' ' -f9- | sed 's/ -/\t-/g' && echo
	}
fi

# Autocomplete hostnames
_complete_hosts () {
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    host_list=`{
        for c in /etc/ssh_config /etc/ssh/ssh_config ~/.ssh/config
        do [ -r $c ] && sed -n -e 's/^Host[[:space:]]//p' -e 's/^[[:space:]]*HostName[[:space:]]//p' $c
        done
        for k in /etc/ssh_known_hosts /etc/ssh/ssh_known_hosts ~/.ssh/known_hosts
        do [ -r $k ] && egrep -v '^[#\[]' $k|cut -f 1 -d ' '|sed -e 's/[,:].*//g'
        done
        sed -n -e 's/^[0-9][0-9\.]*//p' /etc/hosts; }|tr ' ' '\n'|grep -v '*'`
    COMPREPLY=( $(compgen -W "${host_list}" -- $cur))
    return 0
}
complete -F _complete_hosts ssh
complete -F _complete_hosts host


# Color Consta?

# function prompt_func() {
# 	previous_return_value=$?;
# 	# prompt="${TITLEBAR}$BLUE[$RED\w$GREEN$(__git_ps1)$YELLOW$(git_dirty_flag)$BLUE]$COLOR_NONE "
# 	prompt="${WHITE}\w${GREEN}$(parse_git_branch)${COLOR_NONE}"

# 	if [ "$SSH_CONNECTION" ]; then
# 		if [ $(whoami) == "root" ]; then
# 			PS1="${RED}\u@\h ${prompt} # "
# 		else
# 			PS1="${BLUE}\u@\h ${prompt} $ "
# 		fi
# 	else
# 	    PS1="${prompt} $ "
# 	fi
# }

# PROMPT_COMMAND=prompt_func

function _update_ps1() {
    PS1="$(~/.dotfiles/powerline-shell.py $? 2> /dev/null)"
}

if [ "$TERM" != "linux" ]; then
    PROMPT_COMMAND="_update_ps1; $PROMPT_COMMAND"
fi

export EDITOR=vim
export XDEBUG_CONFIG="idekey=PHPSTORM"
