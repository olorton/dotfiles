[ "$IS_OSX" = true ] && alias ls="ls -AGFlhi"
[ "$IS_LINUX" = true ] && alias ls="ls -AGFlhi --color=always"

# Easier navigation:
cd() { builtin cd "$@"; ls; }
alias cd..='cd ../'
alias ..='cd ../'
alias ...='cd ../../'
alias .3='cd ../../../'
alias .4='cd ../../../../'
alias .5='cd ../../../../../'
alias .6='cd ../../../../../../'
alias ~="cd ~"
alias -- -="cd -"

# show paths
alias path='echo -e ${PATH//:/\\n}'

# file
alias cp='cp -iv'
alias mv='mv -iv'

# IP addresses
alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
# TODO fix localip alias
#alias localip="ipconfig getifaddr en1"

# Copy my public key to the pasteboard
[ "$IS_OSX" = true ] && alias pubkey="more ${SSH_KEY_PATH}.pub | pbcopy | printf '=> Public key copied to pasteboard.\n'"

# Flush DNS cache
[ "$IS_OSX" = true ] && alias flushdns="dscacheutil -flushcache"

# Show/hide hidden files in Finder
[ "$IS_OSX" = true ] && alias showdotfiles="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
[ "$IS_OSX" = true ] && alias hidedotfiles="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"

# Hide/show all desktop icons (useful when presenting)
[ "$IS_OSX" = true ] && alias showdeskicons="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"
[ "$IS_OSX" = true ] && alias hidedeskicons="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"

# extract most know archives with one command
extract () {
    if [ -f $1 ] ; then
      case $1 in
        *.tar.bz2)   tar xjf $1     ;;
        *.tar.gz)    tar xzf $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xf $1      ;;
        *.tbz2)      tar xjf $1     ;;
        *.tgz)       tar xzf $1     ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}

# display useful host related informaton
ii() {
    echo -e "\nYou are logged on $HOST"
    echo -e "\nAdditionnal information:$NC " ; uname -a
    echo -e "\nUsers logged on:$NC " ; w -h
    echo -e "\nCurrent date :$NC " ; date
    echo -e "\nMachine stats :$NC " ; uptime
    echo -e "\nCurrent network location :$NC " ; scselect
    echo -e "\nPublic facing IP Address :$NC " ; ip
    #echo -e "\nDNS Configuration:$NC " ; scutil --dns
    echo
}

# fucking .DS_Store files
[ "$IS_OSX" = true ] && alias fuckingdsfiles="find . -type f -name '*.DS_Store' -ls -delete"

# Add TODO count to git status
git() {
    if [[ $@ == "status" ]] || [[ $@ == "s" ]]; then
        count_doto="`git grep TODO | wc -l | tr -d ' '`"
        command git $@
        command echo "There are ${count_doto} TODOs in the codebase"
        if [[ -f "$(git rev-parse --show-toplevel)/TODO.md" ]]; then
            echo "Also found a TODO.md file"
            cat $(git rev-parse --show-toplevel)/TODO.md | grep -v -e '^$' | grep -v -e '^#' | head
        fi
    else
        command git "$@";
    fi;
}

alias rbdevelop="git checkout develop && git pull && git checkout - && git rebase develop"

alias dotedit="vim -c 'set autochdir' $DOTFILES/README.md"

shhh() {
    if [[ -s $DOTFILES/short-help/$@ ]]; then
        cat $DOTFILES/short-help/$@ | less
    fi;
}
