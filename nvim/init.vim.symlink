" Plugin manager -------------------------------------------------------------

call plug#begin()

Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'christoomey/vim-tmux-navigator'
Plug 'itchyny/lightline.vim'
Plug 'morhetz/gruvbox'
Plug 'scrooloose/nerdtree'
Plug 'bling/vim-bufferline'
set rtp+=/usr/local/opt/fzf
Plug 'junegunn/fzf.vim', { 'do': { -> fzf#install() } }
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'ekalinin/Dockerfile.vim'
Plug 'neovim/nvim-lspconfig'
Plug 'hrsh7th/nvim-cmp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-cmdline'
Plug 'hrsh7th/cmp-nvim-lua'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'sbdchd/neoformat'
" TODO Neomake
" TODO shellcheck

call plug#end()



" Basics ---------------------------------------------------------------------

set number
set encoding=utf-8

" For file related tasks, tab complete into sub-folders
"set path+=**

" Time out on key codes but not mappings.
"set ttimeoutlen=10

" Only do case-sensitive search when caps in search string
set ignorecase
set smartcase

" Better indenting
set smartindent

" Enable file type detection and do language-dependent indenting.
filetype plugin indent on

" Fixes issue with the default behavior which is that nvim shifts the cursor
" left when exiting Insert mode: https://news.ycombinator.com/item?id=30463129
au InsertLeave * :normal `^



" Spacing --------------------------------------------------------------------

"set nowrap
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set textwidth=0

autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab



" Backups --------------------------------------------------------------------

set backup
set noswapfile
set undodir=~/.config/nvim/tmp/undo//
set backupdir=~/.config/nvim/tmp/backup//



" Leader ---------------------------------------------------------------------

let mapleader = ","



" Colour scheme --------------------------------------------------------------

colorscheme gruvbox
set bg=dark
syntax on

" Enable CursorLine
set cursorline

" Default Colors for CursorLine
highlight  CursorLine ctermbg=237 ctermfg=None

" Change Color when entering Insert Mode
autocmd InsertEnter * highlight  CursorLine ctermbg=239 ctermfg=None

" Revert Color to default when leaving Insert Mode
autocmd InsertLeave * highlight  CursorLine ctermbg=237 ctermfg=None


" Lightline ------------------------------------------------------------------

set laststatus=2
set noshowmode
let g:lightline = {
      \ 'colorscheme': 'gruvbox',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'filename', 'gitbranch', 'readonly', 'modified'] ]
      \ },
      \ 'component': {
      \   'helloworld': 'Hello, world!',
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head',
      \ },
  \ }


" Nerdtree
map <C-n> :NERDTreeToggle<CR>
nmap ,n :NERDTreeFind<CR>
let NERDTreeQuitOnOpen=1  " Close nerdtree after a file is opened
let NERDTreeIgnore = ['\.pyc$', '__pycache__']



" Fzf
let $FZF_DEFAULT_COMMAND = 'ag -g ""'



" Trailing whitespace --------------------------------------------------------

" Show tab characters as: --->
set list
set listchars=tab:-->

" Highlight trailing whitespace with red
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()
" Remove trailing lines on save. ALEFix is not run automatically on save.
autocmd BufWritePre * %s/\s\+$//e



" Highlight cursor -----------------------------------------------------------

augroup CursorLine
  au!
  au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  au WinLeave * setlocal nocursorline
augroup END



" Autosave -------------------------------------------------------------------

" Reload when entering the buffer or gaining focus
au FocusGained,BufEnter * :silent! !

" Save when exiting the buffer or losing focus
au FocusLost,WinLeave,CursorHold * :silent! wall

" Write to disk when navigating file
set autowrite



" Commands -------------------------------------------------------------------

"command! MakeTags ! /usr/local/bin/ctags -R --exclude=.git --exclude=node_modules .
command! EditConfig :edit ~/.config/nvim/init.vim
command! ReloadConfig :source ~/.config/nvim/init.vim



" Keybindings ----------------------------------------------------------------

nnoremap <C-g> :Rg<Cr>
nnoremap <C-p> :Files<Cr>
nmap ; :Buffers<CR>
nmap <Leader>t :Tags<CR>
map <leader>w :up\|bd<cr>
vmap <leader>y "*y<CR>
nmap <leader>l :Neoformat<CR>



" Movement -------------------------------------------------------------------

" Break the habit, you stupid boy!
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>

" Cycle through buffers
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>

" Clear highlights
nnoremap <Esc> :nohl<CR>

" Set the number of lines to keep viewable on the screen. Default = 0;
set scrolloff=10



" Tab style autocomplete dropdown --------------------------------------------
" TODO Is this rubbish? Probably? Replace?
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-n>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>



" Commentary -----------------------------------------------------------------

nmap <leader>c gcc
xmap <leader>c gc



" Neoformat ------------------------------------------------------------------

let g:neoformat_run_all_formatters = 1
let g:neoformat_try_formatprg = 1

let g:neoformat_enabled_css = ['prettier']
let g:neoformat_enabled_javascript = ['prettier']
let g:neoformat_enabled_javascriptreact = ['prettier']
let g:neoformat_enabled_jsx = ['prettier']
let g:neoformat_enabled_python = ['black']
" let g:neoformat_enabled_bzl = ["buildifier"]


" Git blame toggle -----------------------------------------------------------
" https://github.com/tpope/vim-fugitive/issues/1474

function! s:BlameToggle() abort
  let found = 0
  for winnr in range(1, winnr('$'))
    if getbufvar(winbufnr(winnr), '&filetype') ==# 'fugitiveblame'
      exe winnr . 'close'
      let found = 1
    endif
  endfor
  if !found
    Git blame
  endif
endfunction

nmap <silent> <Leader>b :call <SID>BlameToggle()<CR>



" Help system ----------------------------------------------------------------

augroup vimrc_help
    autocmd!
    autocmd BufEnter *.txt if &buftype == 'help' | wincmd L | endif
augroup END

augroup ft_vim
    au!

    au BufNewFile,BufRead init.vim* setlocal filetype=vim

    au FileType vim setlocal foldmethod=marker
    au FileType help setlocal textwidth=78
augroup END



" nvim-cmp ------------------------------------------------------------------------

lua <<EOF
  local cmp = require 'cmp'
  local keyword_length = 3

  cmp.setup({
    mapping = {
      ['<C-b>'] = cmp.mapping(cmp.mapping.scroll_docs(-4), { 'i', 'c' }),
      ['<C-f>'] = cmp.mapping(cmp.mapping.scroll_docs(4), { 'i', 'c' }),
      ['<C-Space>'] = cmp.mapping(cmp.mapping.complete(), { 'i', 'c' }),
      ['<C-y>'] = cmp.config.disable, -- Specify `cmp.config.disable` if you want to remove the default `<C-y>` mapping.
      ['<C-e>'] = cmp.mapping({
        i = cmp.mapping.abort(),
        c = cmp.mapping.close(),
      }),
      ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
    },
    sources = cmp.config.sources({
      { name = 'nvim_lua' },
      { name = 'nvim_lsp' },
      { name = 'path' },
      { name = 'buffer', keyword_length = keyword_length },
    }),
  })

  -- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline('/', {
    sources = {
      { name = 'buffer' }
    }
  })

  -- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
  cmp.setup.cmdline(':', {
    sources = cmp.config.sources({
      { name = 'path' }
    }, {
      { name = 'cmdline' }
    })
  })

  -- Setup lspconfig.
  local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
  -- Replace <YOUR_LSP_SERVER> with each lsp server you've enabled.
  require('lspconfig')['pylsp'].setup {
    capabilities = capabilities
  }
EOF



" LSP ------------------------------------------------------------------------

lua << EOF
local nvim_lsp = require('lspconfig')

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  -- Enable completion triggered by <c-x><c-o>
  --buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<space>e', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
  buf_set_keymap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>q', '<cmd>lua vim.diagnostic.setloclist()<CR>', opts)
  buf_set_keymap('n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)

end

nvim_lsp.pylsp.setup({
  enable = true,
  on_attach = on_attach,
  settings = {
    pylsp = {
      configurationSources = {"flake8"},
      plugins = {
        jedi_completion = {enabled = false},
        jedi_hover = {enabled = false},
        jedi_references = {enabled = false},
        jedi_signature_help = {enabled = false},
        jedi_symbols = {enabled = false, all_scopes = true},
        pycodestyle = {enabled = false},
        flake8 = {enabled = true},
        mypy = {enabled = false},
        isort = {enabled = false},
        yapf = {enabled = false},
        pylint = {enabled = false},
        pydocstyle = {enabled = false},
        mccabe = {enabled = false},
        preload = {enabled = false},
        rope_completion = {enabled = false}
      }
    }
  }
})

-- Use a loop to conveniently call 'setup' on multiple servers and
-- map buffer local keybindings when the language server attaches
local servers = { 'rust_analyzer' }
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup {
    on_attach = on_attach,
    flags = {
      debounce_text_changes = 150,
    }
  }
end
EOF



" Treesitter -----------------------------------------------------------------

lua <<EOF
require'nvim-treesitter.configs'.setup {
  -- One of "all", "maintained" (parsers with maintainers), or a list of languages
  ensure_installed = "maintained",

  -- Install languages synchronously (only applied to `ensure_installed`)
  sync_install = false,

  -- List of parsers to ignore installing
  ignore_install = { "norg", "latex" },

  highlight = {
    -- `false` will disable the whole extension
    enable = true,

    -- list of language that will be disabled
    --disable = { "norg" },

    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = false,
  },
}
EOF



" File types -----------------------------------------------------------------

augroup ft_python
    au!

    " requirements files
    au BufNewFile,BufRead *requirements.txt setlocal filetype=text nospell

    au FileType python setlocal omnifunc=pythoncomplete#Complete
    au FileType python setlocal define=^\s*\\(def\\\\|class\\)
    au FileType python setlocal foldnestmax=1

    " More syntax highlighting for Python
    let python_highlight_all = 1
augroup END
