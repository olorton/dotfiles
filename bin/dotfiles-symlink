#!/usr/bin/env bash

DOTFILES_ROOT="${HOME}/Code/dotfiles/"
[ -d "${HOME}/code" ] && DOTFILES_ROOT="${HOME}/code/dotfiles/"

symlink_dotfile () {
    SOURCE="${1}"
    TARGET="${2}"

    if [ ! -L "${TARGET}" ] && [ -f "${TARGET}" ]; then
        echo "Backing up file ${TARGET} to ${TARGET}.backup before creating symlink"
        mv "${TARGET}" "${TARGET}.backup"
    elif [ -L "${TARGET}" ] && [ -f "${TARGET}" ]; then
        echo "Target link already exists, replacing linked file: ${DOTFILES_ROOT}${SOURCE} -> ${TARGET}"
        rm -f "${TARGET}"
    elif [ -L "${TARGET}" ] && [ -d "${TARGET}" ]; then
        echo "Target link dir already exists, replacing linked file: ${DOTFILES_ROOT}${SOURCE} -> ${TARGET}"
        rm -f "${TARGET}"
    elif [ ! -L "${TARGET}" ] && [ -d "${TARGET}" ]; then
        echo "Backing up dir ${TARGET} to ${TARGET}.backup before creating symlink"
        mv "${TARGET}" "${TARGET}.backup"
    elif [ -e "${TARGET}" ]; then
        echo "Cannot overwrite because the destination exists, and is not a file or a link: ${TARGET}"
        exit 1

        echo "Target link does not exist, linking file from dotfiles to: ${TARGET}"
        mkdir -p "$(dirname "${TARGET}")"
    fi

    ln -s "${DOTFILES_ROOT}${SOURCE}" "${TARGET}"
    if [ -L "${TARGET}" ] && [ -f "${TARGET}" ]; then
        echo "SUCCESSFULLY created link: ${DOTFILES_ROOT}${SOURCE} -> ${TARGET}"
    fi
}

mkdir -p ~/.config/cmus
symlink_dotfile cmus/rc ~/.config/cmus/rc
symlink_dotfile git/gitconfig.symlink ~/.gitconfig
symlink_dotfile git/gitignore_global ~/.gitignore_global
symlink_dotfile tig/tigrc.symlink ~/.tigrc
symlink_dotfile tmux/tmux.conf.symlink ~/.tmux.conf
mkdir -p ~/.config/nvim/tmp/backup
mkdir -p ~/.config/nvim/tmp/undo
symlink_dotfile nvim/init.vim.symlink ~/.config/nvim/init.vim
symlink_dotfile zsh/zshrc.symlink ~/.zshrc
mkdir -p ~/.config/alacritty
symlink_dotfile alacritty/main.yml ~/.config/alacritty/main.yml
[[ $OSTYPE == "darwin"* ]] && symlink_dotfile alacritty/mac.yml ~/.config/alacritty/os_overrides.yml
[[ $OSTYPE == "linux"* ]] && symlink_dotfile alacritty/linux.yml ~/.config/alacritty/os_overrides.yml
# TODO remove this section once all machines have been migrated to new file structure
new_file="${DOTFILES_ROOT}/alacritty/local.yml"
old_file="$(cd ~ && pwd)/.config/alacritty/host_overrides.yml"
ls -al "$old_file"
if [ -e "$old_file" ]; then
    echo "Moving old alacritty host_overrides.yml"
    mv $old_file $new_file
else
    echo "Touching alacritty local.yml"
    touch "${DOTFILES_ROOT}/alacritty/local.yml"
fi
symlink_dotfile alacritty/local.yml ~/.config/alacritty/local.yml
symlink_dotfile alacritty/alacritty.yml ~/.config/alacritty/alacritty.yml
symlink_dotfile pyenv/python-version ~/.python-version
[[ $OSTYPE == "linux"* ]] && symlink_dotfile tmux/tmux-linux.conf.symlink ~/.tmux.os.conf
[[ $OSTYPE == "darwin"* ]] && symlink_dotfile tmux/tmux-macosx.conf.symlink ~/.tmux.os.conf
[[ $OSTYPE == "darwin"* ]] && [ -d ~/Library/Application\ Support/Sublime\ Text ] && symlink_dotfile sublime_text/User/ ~/Library/Application\ Support/Sublime\ Text/Packages/User
symlink_dotfile direnv/direnvrc.symlink ~/.direnvrc
[[ $OSTYPE == "darwin"* ]] && symlink_dotfile idasen-controller/config.yaml ~/Library/Application\ Support/idasen-controller/config.yaml
[[ $OSTYPE == "linux"* ]] && symlink_dotfile i3/config ~/.config/i3/config
