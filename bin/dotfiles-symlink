#!/usr/bin/env bash

DOTFILES_ROOT=$(cd $(dirname "${BASH_SOURCE[0]}") && cd .. && pwd)

ANSI_RESET="\033[0m"
FG_BLACK="\033[30m"
FG_RED="\033[31m"
FG_GREEN="\033[32m"
FG_YELLOW="\033[33m"
FG_BLUE="\033[34m"
FG_PURPLE="\033[35m"
FG_CYAN="\033[36m"
FG_LIGHT_GRAY="\033[37m"

symlink_dotfile () {
    SOURCE="${1}"
    TARGET="${2}"

    info_message=""

    if [ ! -L "${TARGET}" ] && [ -f "${TARGET}" ]; then
        info_message="${FG_BLUE} (File backed up to: ${TARGET}.backup)"
        mv "${TARGET}" "${TARGET}.backup"
    elif [ -L "${TARGET}" ] && [ -f "${TARGET}" ]; then
        info_message="${FG_LIGHT_GRAY} (replaced)"
        rm -f "${TARGET}"
    elif [ -L "${TARGET}" ] && [ -d "${TARGET}" ]; then
        info_message="${FG_LIGHT_GRAY} (replaced)"
        rm -f "${TARGET}"
    elif [ ! -L "${TARGET}" ] && [ -d "${TARGET}" ]; then
        info_message="${FG_BLUE} (Dir backed up to: ${TARGET}.backup)"
        mv "${TARGET}" "${TARGET}.backup"
    elif [ -e "${TARGET}" ]; then
        printf "${FG_RED}Cannot overwrite because the destination exists, and is not a file or a link: ${TARGET}\n${ANSI_RESET}"
        exit 1
    fi

    # Ensure target's directories exists
    mkdir -p $(dirname "${TARGET}")

    # Create symlink
    ln -s "${DOTFILES_ROOT}/${SOURCE}" "${TARGET}"
    if [ -L "${TARGET}" ] && [ -f "${TARGET}" ]; then
        printf "${FG_GREEN}${SOURCE} -> ${TARGET/$HOME/~}${info_message}\n${ANSI_RESET}"
    fi
}

# Check switch for server/remote only tasks
ALLOW_DESKTOP=1
[[ ${1} == "remote" ]] && ALLOW_DESKTOP=0
[[ $ALLOW_DESKTOP == 0 ]] && echo "Only symlinking server/remote dotfiles."

# Tasks ----------------------------------------------------------------------

# Git
symlink_dotfile git/gitconfig.symlink ~/.gitconfig
symlink_dotfile git/gitignore_global ~/.gitignore_global

# Tig
symlink_dotfile tig/tigrc.symlink ~/.tigrc

# Tmux
symlink_dotfile tmux/tmux.conf.symlink ~/.tmux.conf
[[ $OSTYPE == "linux"* ]] && symlink_dotfile tmux/tmux-linux.conf.symlink ~/.tmux.os.conf
[[ $OSTYPE == "darwin"* ]] && symlink_dotfile tmux/tmux-macosx.conf.symlink ~/.tmux.os.conf

# Nvim (REMOVE)
rm -rf ~/.config/nvim

# Vim
mkdir -p ~/.vim/tmp/{undo,backup}
symlink_dotfile vim/vimrc.symlink ~/.vimrc

# Zsh
symlink_dotfile zsh/zshrc.symlink ~/.zshrc

# Pyenv
symlink_dotfile pyenv/python-version ~/.python-version

# Direnv
symlink_dotfile direnv/direnvrc.symlink ~/.direnvrc

# Cmus
[[ $ALLOW_DESKTOP == 1 ]] && symlink_dotfile cmus/rc ~/.config/cmus/rc

# i3
[[ $ALLOW_DESKTOP == 1 ]] && [[ $OSTYPE == "linux"* ]] && symlink_dotfile i3/config ~/.config/i3/config

# Alacritty
[[ $ALLOW_DESKTOP == 1 ]] && symlink_dotfile alacritty/main.yml ~/.config/alacritty/main.yml
[[ $ALLOW_DESKTOP == 1 ]] && [[ $OSTYPE == "darwin"* ]] && symlink_dotfile alacritty/mac.yml ~/.config/alacritty/os_overrides.yml
[[ $ALLOW_DESKTOP == 1 ]] && [[ $OSTYPE == "linux"* ]] && symlink_dotfile alacritty/linux.yml ~/.config/alacritty/os_overrides.yml
[[ $ALLOW_DESKTOP == 1 ]] && symlink_dotfile alacritty/colours ~/.config/alacritty/colours
[[ $ALLOW_DESKTOP == 1 ]] && symlink_dotfile alacritty/local.yml ~/.config/alacritty/local.yml
[[ $ALLOW_DESKTOP == 1 ]] && symlink_dotfile alacritty/alacritty.yml ~/.config/alacritty/alacritty.yml

# Sublime text
[[ $ALLOW_DESKTOP == 1 ]] && [[ $OSTYPE == "darwin"* ]] && [ -d ~/Library/Application\ Support/Sublime\ Text ] && symlink_dotfile sublime_text/User/ ~/Library/Application\ Support/Sublime\ Text/Packages/User
