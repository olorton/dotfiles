#!/usr/bin/env bash
# shellcheck disable=SC2059

# TODO why does running this script ALWAYS result in an exit code of 1

set -Eeuo pipefail

DOTFILES_ROOT=$(cd "$(dirname "${BASH_SOURCE[0]}")" && cd .. && pwd)
DISABLE_DESKTOP_SYMLINKS_FILE="$DOTFILES_ROOT/.disable_desktop_symlinks"
source ${DOTFILES_ROOT}/zsh/vars

ANSI_RESET="\033[0m"
# FG_BLACK="\033[30m"
FG_RED="\033[31m"
FG_GREEN="\033[32m"
# FG_YELLOW="\033[33m"
FG_BLUE="\033[34m"
# FG_PURPLE="\033[35m"
# FG_CYAN="\033[36m"
FG_LIGHT_GRAY="\033[37m"

symlink_dotfile () {
    SOURCE="${1}"
    TARGET="${2}"

    info_message=""

    if [ ! -L "${TARGET}" ] && [ -f "${TARGET}" ]; then
        info_message="${FG_BLUE} (File backed up to: ${TARGET}.backup)"
        mv "${TARGET}" "${TARGET}.backup"
    elif [ -L "${TARGET}" ] && [ -f "${TARGET}" ]; then
        info_message="${FG_LIGHT_GRAY} (replaced)"
        rm -f "${TARGET}"
    elif [ -L "${TARGET}" ] && [ -d "${TARGET}" ]; then
        info_message="${FG_LIGHT_GRAY} (replaced)"
        rm -f "${TARGET}"
    elif [ ! -L "${TARGET}" ] && [ -d "${TARGET}" ]; then
        info_message="${FG_BLUE} (Dir backed up to: ${TARGET}.backup)"
        mv "${TARGET}" "${TARGET}.backup"
    elif [ -e "${TARGET}" ]; then
        printf "${FG_RED}Cannot overwrite because the destination exists, and is not a file or a link: ${TARGET}\n${ANSI_RESET}"
        exit 1
    fi

    # Ensure target's directories exists
    mkdir -p "$(dirname "${TARGET}")"

    # Create symlink
    ln -s "${DOTFILES_ROOT}/${SOURCE}" "${TARGET}"
    if [ -L "${TARGET}" ] && [ -f "${TARGET}" ]; then
        printf "${FG_GREEN}${SOURCE} -> ${TARGET/$HOME/~}${info_message}\n${ANSI_RESET}"
    fi
}

parse_params() {
    # default values of variables set from params
    if [[ -f $DISABLE_DESKTOP_SYMLINKS_FILE ]]; then
        ALLOW_DESKTOP=0
    else
        ALLOW_DESKTOP=1
    fi

    while :; do
        case "${1-}" in
        -v | --verbose) set -x ;;
        --remote) ALLOW_DESKTOP=0 ;;
        -?*) die "Unknown option: $1" ;;
        *) break ;;
        esac
        shift
    done

    return 0
}

cli_tasks() {
    # Git
    symlink_dotfile "git/gitconfig.symlink" "$HOME/.gitconfig"
    symlink_dotfile "git/gitignore_global" "$HOME/.gitignore_global"

    # Tig
    symlink_dotfile "tig/tigrc.symlink" "$HOME/.tigrc"

    # Tmux
    symlink_dotfile "tmux/tmux.conf.symlink" "$HOME/.tmux.conf"
    [[ $OSTYPE == "linux"* ]] && symlink_dotfile "tmux/tmux-linux.conf.symlink" "$HOME/.tmux.os.conf"
    [[ $OSTYPE == "darwin"* ]] && symlink_dotfile "tmux/tmux-macosx.conf.symlink" "$HOME/.tmux.os.conf"

    # Vim
    mkdir -p "$HOME/.vim/tmp/{undo,backup}"
    symlink_dotfile "vim/vimrc.symlink" "$HOME/.vimrc"
    mkdir -p "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/tmp/{undo,backup}
    symlink_dotfile "nvim/init.vim.symlink" "$XDG_CONFIG_HOME/nvim/init.vim"
    symlink_dotfile "nvim/coc-settings.json" "$XDG_CONFIG_HOME/nvim/coc-settings.json"

    # Zsh
    symlink_dotfile "zsh/zshrc.symlink" "$HOME/.zshrc"

    # Pyenv
    symlink_dotfile "pyenv/python-version" "$HOME/.python-version"

    # Direnv
    symlink_dotfile "direnv/direnvrc.symlink" "$HOME/.direnvrc"
}

desktop_tasks() {
    # XDG User dirs
    [[ $OSTYPE == "linux"* ]] && symlink_dotfile "xdg/user-dirs.dirs" "$XDG_CONFIG_HOME/user-dirs.dirs"

    # Cmus
    symlink_dotfile "cmus/rc" "$XDG_CONFIG_HOME/cmus/rc"

    # i3
    [[ $OSTYPE == "linux"* ]] && symlink_dotfile "i3/config" "$XDG_CONFIG_HOME/i3/config"
    [[ $OSTYPE == "linux"* ]] && symlink_dotfile "i3blocks" "$XDG_CONFIG_HOME/i3blocks"

    # Alacritty
    symlink_dotfile "alacritty/main.yml" "$XDG_CONFIG_HOME/alacritty/main.yml"
    [[ $OSTYPE == "darwin"* ]] && symlink_dotfile "alacritty/mac.yml" "$XDG_CONFIG_HOME/alacritty/os_overrides.yml"
    [[ $OSTYPE == "linux"* ]] && symlink_dotfile "alacritty/linux.yml" "$XDG_CONFIG_HOME/alacritty/os_overrides.yml"
    symlink_dotfile "alacritty/colours" "$XDG_CONFIG_HOME/alacritty/colours"
    symlink_dotfile "alacritty/local.yml" "$XDG_CONFIG_HOME/alacritty/local.yml"
    symlink_dotfile "alacritty/alacritty.yml" "$XDG_CONFIG_HOME/alacritty/alacritty.yml"

    # Sublime text
    [[ $OSTYPE == "darwin"* ]] && [ -d "$HOME/Library/Application Support/Sublime Text" ] && symlink_dotfile "sublime_text/User/" "$HOME/Library/Application Support/Sublime Text/Packages/User"
}

parse_params "$@"
if [[ $ALLOW_DESKTOP == 1 ]]; then
    cli_tasks
    desktop_tasks
else
    touch "$DISABLE_DESKTOP_SYMLINKS_FILE"
    echo "Only symlinking server/remote dotfiles."
    echo "To disable delete $DISABLE_DESKTOP_SYMLINKS_FILE"
    cli_tasks
fi
